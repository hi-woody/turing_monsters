[{"E:\\Lokian.eth\\src\\index.tsx":"1","E:\\Lokian.eth\\src\\AppContainer.tsx":"2","E:\\Lokian.eth\\src\\App.tsx":"3","E:\\Lokian.eth\\src\\utils\\txFail.js":"4","E:\\Lokian.eth\\src\\utils\\txSuccess.js":"5","E:\\Lokian.eth\\src\\wallet\\connectors.ts":"6","E:\\Lokian.eth\\src\\wallet\\hooks.ts":"7","E:\\Lokian.eth\\src\\StatBar.tsx":"8","E:\\Lokian.eth\\src\\components\\Spinner.tsx":"9","E:\\Lokian.eth\\src\\sprites-copy\\index.js":"10"},{"size":203,"mtime":1632645713483,"results":"11","hashOfConfig":"12"},{"size":461,"mtime":1632416988498,"results":"13","hashOfConfig":"12"},{"size":46757,"mtime":1648802229702,"results":"14","hashOfConfig":"12"},{"size":291,"mtime":1639637154919,"results":"15","hashOfConfig":"12"},{"size":343,"mtime":1638107782317,"results":"16","hashOfConfig":"12"},{"size":171,"mtime":1648796480580,"results":"17","hashOfConfig":"12"},{"size":2588,"mtime":1633872796792,"results":"18","hashOfConfig":"12"},{"size":257,"mtime":1633872639985,"results":"19","hashOfConfig":"12"},{"size":805,"mtime":1633340784350,"results":"20","hashOfConfig":"12"},{"size":7264,"mtime":1648799923384,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18w6p6u",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Lokian.eth\\src\\index.tsx",[],"E:\\Lokian.eth\\src\\AppContainer.tsx",["45"],"import React from 'react'\r\nimport { Web3ReactProvider } from '@web3-react/core'\r\nimport App from './App'\r\nimport { Web3Provider } from '@ethersproject/providers'\r\n\r\nfunction getLibrary(provider: any): Web3Provider {\r\n  const library = new Web3Provider(provider)\r\n  library.pollingInterval = 12000\r\n  return library\r\n}\r\n\r\nexport default function () {\r\n  return (\r\n    <Web3ReactProvider getLibrary={getLibrary}>\r\n      <App />\r\n    </Web3ReactProvider>\r\n  )\r\n}\r\n","E:\\Lokian.eth\\src\\App.tsx",["46","47","48","49"],"import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { Tab, Tabs } from 'react-bootstrap'\r\nimport StatBar from './StatBar'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { Spinner } from './components/Spinner'\r\n\r\n// Library to work with Ethereum like blockchain\r\nimport { injected } from './wallet/connectors'\r\nimport { useEagerConnect, useInactiveListener } from './wallet/hooks'\r\nimport {\r\n  NoEthereumProviderError,\r\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\r\n} from '@web3-react/injected-connector'\r\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { formatUnits, parseEther, formatEther } from '@ethersproject/units'\r\n\r\n// abis\r\nimport contrInterface from './interface.json' // Load contract json file\r\nimport erc20Interface from './erc20Interface.json' // Load erc20 contract json file\r\nimport nftInterface from './project.nft.abi.json'\r\n\r\n// Load all the background images for the 10 different Cryptomon types\r\nimport bg0 from './sprites-copy/background/0.png'\r\nimport bg1 from './sprites-copy/background/1.png'\r\nimport bg2 from './sprites-copy/background/2.png'\r\nimport bg3 from './sprites-copy/background/3.png'\r\nimport bg4 from './sprites-copy/background/4.png'\r\nimport bg5 from './sprites-copy/background/5.png'\r\nimport bg6 from './sprites-copy/background/6.png'\r\nimport bg7 from './sprites-copy/background/7.png'\r\nimport bg8 from './sprites-copy/background/8.png'\r\nimport bg9 from './sprites-copy/background/9.png'\r\nimport bg10 from './sprites-copy/background/10.png'\r\n\r\nimport MonImages from \"./sprites-copy\";\r\n\r\n// axios\r\nimport axios, { AxiosResponse } from 'axios'\r\n\r\n// util\r\nimport { Web3Provider } from '@ethersproject/providers'\r\nimport txSuccess from './utils/txSuccess'\r\nimport txFail from './utils/txFail'\r\n\r\nenum ConnectorNames {\r\n  Injected = 'Injected',\r\n}\r\n\r\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\r\n  [ConnectorNames.Injected]: injected,\r\n}\r\n\r\n// Contact deployment address\r\n// const CONTRACT_ADDRESS = '0x5A4c15d98ef9cfC953ef131dD25e855ce11816Dd'\r\nconst CONTRACT_ADDRESS = '0xb1e821c9550463b0d3d2aA4846bE79D6aB5Ec6ea'\r\n// ERC20 coin\r\n// const ERC20_CONTRACT_ADDRESS = '0x1b7A38b3C77e405750aF1C08d102eF4f23e8c3a2'\r\nconst ERC20_CONTRACT_ADDRESS = '0x2683EbB22FE772dB15C09b99897bD38B2Bf2487E'\r\n// ERC1155 lokian items\r\n// const ERC1155_CONTRACT_ADDRESS = '0x77a9BD3C0ae2e65c699D53b011667c642b2c68C8'\r\nconst ERC1155_CONTRACT_ADDRESS = '0xC924448D65D0b20629eaAD25eE79bC2911E8690a'\r\n\r\n// Add background images in an array for easy access\r\nconst bg = [bg0, bg1, bg2, bg3, bg4, bg5, bg6, bg7, bg8, bg9, bg10]\r\n\r\n// Add all 151 Cryptomon names in an array\r\nconst names = [\r\n  'Dryad',\r\n  'Hamadryad',\r\n  'Leshy',\r\n  'Santelmo',\r\n  'Cerberus',\r\n  'Efreet',\r\n  'Fastitocalon',\r\n  'Aspidochelone',\r\n  'Zaratan',\r\n  'Arachne',\r\n  'Jorogumo',\r\n  'Tsuchigumo',\r\n  'Pabilsag',\r\n  'Girtablilu',\r\n  'Selket',\r\n  'Tsikavats',\r\n  'Munnin',\r\n  'Huginn',\r\n  'Azeban',\r\n  'Ratatoskr',\r\n  'Stratim',\r\n  'Navka',\r\n  'Apep',\r\n  'Nidhoggr',\r\n  'Raiju',\r\n  'Raijin',\r\n  'Amphivena',\r\n  'Basilisk',\r\n  'Wolpertinger',\r\n  'Ramidreju',\r\n  'Echinemon',\r\n  'Mujina',\r\n  'Kamaitachi',\r\n  'Lavellan',\r\n  'Vila',\r\n  'Huldra',\r\n  'Chimera',\r\n  'Kyuubi',\r\n  'Nixie',\r\n  'Tuathan',\r\n  'Minyades',\r\n  'Camazotz',\r\n  'Curupira',\r\n  'Penghou',\r\n  'Ghillie_Dhu',\r\n  'Myrmecoleon',\r\n  'Myrmidon',\r\n  'Mothman',\r\n  'Moth_King',\r\n  'Grootslang',\r\n  'Yaoguai',\r\n  'Cait_Sidhe',\r\n  'Cath_Balug',\r\n  'Nakki',\r\n  'Kappa',\r\n  'Satori',\r\n  'Shojo',\r\n  'Skohl',\r\n  'Haet',\r\n  'Vodyanoy',\r\n  'Undine',\r\n  'Melusine',\r\n  'Vukodlak',\r\n  'Chernobog',\r\n  'Djinn',\r\n  'Bauk',\r\n  'Troll',\r\n  'Jotun',\r\n  'Spriggan',\r\n  'Jubokko',\r\n  'Kodama',\r\n  'Bukavak',\r\n  'Kraken',\r\n  'Clayboy',\r\n  'Met',\r\n  'Emet',\r\n  'Sleipnir',\r\n  'Todorats',\r\n  'Scylla',\r\n  'Charybdis',\r\n  'Brontes',\r\n  'Arges',\r\n  'Hraesvelgr',\r\n  'Berunda',\r\n  'Cockatrice',\r\n  'Selkie',\r\n  'Rusalka',\r\n  'Tarasque',\r\n  'Meretseger',\r\n  'Carbuncle',\r\n  'Shen',\r\n  'Boogeyman',\r\n  'Banshee',\r\n  'Mare',\r\n  'Dilong',\r\n  'Incubus',\r\n  'Succubus',\r\n  'Cancer',\r\n  'Karkinos',\r\n  'Druk',\r\n  'Shenlong',\r\n  'Gan_Ceann',\r\n  'Oni',\r\n  'Tairanohone',\r\n  'Gashadokuro',\r\n  'Yeren',\r\n  'Yeti',\r\n  'Yowie',\r\n  'Nezhit',\r\n  'Chuma',\r\n  'Sigbin',\r\n  'Gargoyle',\r\n  'Caladrius',\r\n  'Umibozu',\r\n  'Callisto',\r\n  'Kelpie',\r\n  'Makara',\r\n  'Morgen',\r\n  'Merrow',\r\n  'Naiad',\r\n  'Nereid',\r\n  'Pixiu',\r\n  'Khepri',\r\n  'Likho',\r\n  'kitsune',\r\n  'Caorthannach',\r\n  'Kaggen',\r\n  'Audumbla',\r\n  'Lochness',\r\n  'Jormungandr',\r\n  'Leviathan',\r\n  'Doppelganger',\r\n  'Skvader',\r\n  'Fossegrim',\r\n  'Valkyrie',\r\n  'Basan',\r\n  'Tsukumogami',\r\n  'Luska',\r\n  'Hydra',\r\n  'Afanc',\r\n  'Cetus',\r\n  'Vedfolnir',\r\n  'Baku',\r\n  'Alkonost',\r\n  'Quetzalcoatl',\r\n  'Anzu',\r\n  'Zmey',\r\n  'Azhdaya',\r\n  'Fafnir',\r\n  'Baba_Yaga',\r\n  'Baba_Roga',\r\n]\r\n\r\nasync function getMons(_library, _account) {\r\n  const contr = new Contract(CONTRACT_ADDRESS, contrInterface, _library.getSigner(_account))\r\n  const totalMons = parseInt(await contr.totalMons())\r\n  return Promise.all([...Array(totalMons).keys()].map((id) => contr.mons(id)))\r\n}\r\n\r\nasync function approve(_library, _account, _amount) {\r\n  const erc20Contr = new Contract(ERC20_CONTRACT_ADDRESS, erc20Interface, _library.getSigner(_account))\r\n  const newAmount = `${parseEther(_amount)}`\r\n  return await erc20Contr.approve(CONTRACT_ADDRESS, newAmount)\r\n}\r\n\r\nfunction Account() {\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <span>\r\n      {account === null ? '-' : account ? `${account.substring(0, 6)}...${account.substring(account.length - 4)}` : ''}\r\n    </span>\r\n  )\r\n}\r\n\r\nasync function getTokenBalance(_library, _account) {\r\n  if (!_library || !_account) {\r\n    return\r\n  }\r\n  const erc20Contr = new Contract(ERC20_CONTRACT_ADDRESS, erc20Interface, _library.getSigner(_account))\r\n  const bal = await erc20Contr.balanceOf(_account)\r\n\r\n  return formatEther(BigNumber.from(bal?._hex).toBigInt())\r\n}\r\n\r\nfunction getErrorMessage(error: Error) {\r\n  if (error instanceof NoEthereumProviderError) {\r\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\r\n  } else if (error instanceof UnsupportedChainIdError) {\r\n    return \"You're connected to an unsupported network.\"\r\n  } else if (error instanceof UserRejectedRequestErrorInjected) {\r\n    return 'Please authorize this website to access your Ethereum account.'\r\n  } else {\r\n    console.error(error)\r\n    return 'An unknown error occurred. Check the console for more details.'\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  const [cryptomons, setCryptomons] = useState([])\r\n  const [myCryptomons, setMyCryptomons] = useState([])\r\n  const [otherCryptomons, setOtherCryptomons] = useState([])\r\n  const [value, setValue] = useState(0) // Used in My Cryptomons tab for input in price text\r\n  // Used in breeding tab\r\n  const [breedChoice1, setBreedChoice1] = useState(null)\r\n  const [breedChoice2, setBreedChoice2] = useState(null)\r\n  // Used in fighting tab\r\n  const [fightChoice1, setFightChoice1] = useState(null)\r\n  const [fightChoice2, setFightChoice2] = useState(null)\r\n  const [winner, setWinner] = useState(null) // Used to display winner of the last fight\r\n  const [rounds, setRounds] = useState(null) // Used to display number of rounds the fight lasted\r\n  const [shareId, setShareId] = useState('') // Used in shareId form input field\r\n  const [shareAddress, setShareAddress] = useState('') // Used in shareAddress form input field\r\n  const [coinData, setCoinData] = useState<AxiosResponse | null>(null)\r\n  const [tokenBalance, setTokenBalance] = useState('0')\r\n  const [fightTxDone, setFightTxDone] = useState(false)\r\n  const [rewards, setRewards] = useState(0)\r\n\r\n  const [healingPotions, setHealingPotions] = useState(null)\r\n  const [manaPotions, setManaPotions] = useState(null)\r\n  const [magicPotions, setMagicPotions] = useState(null)\r\n  const [swords, setSwords] = useState(null)\r\n  const [shields, setShields] = useState(null)\r\n\r\n  const [disableFightBtn, setDisableFightBtn] = useState(false)\r\n\r\n  const [buyItemAmount, setBuyItemAmount] = useState('0')\r\n  const [burnAmount, setBurnAmount] = useState('0')\r\n  const [disableBuyItemBtn, setDisableBuyItem] = useState(false)\r\n\r\n  const context = useWeb3React<Web3Provider>()\r\n  const { connector, account, library, activate, deactivate, active, error } = context\r\n\r\n  // handle logic to recognize the connector currently being activated\r\n  const [activatingConnector, setActivatingConnector] = React.useState<any>()\r\n  useEffect(() => {\r\n    if (activatingConnector && activatingConnector === connector) {\r\n      setActivatingConnector(undefined)\r\n    }\r\n\r\n    refreshMons()   \r\n  }, [activatingConnector, connector])\r\n\r\n  // Get network coin price e.g. eth or glmr price\r\n  useEffect(() => {\r\n    const eth = 'ethereum'\r\n    const url = `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=${eth}`\r\n    let unmounted = false\r\n    let source = axios.CancelToken.source()\r\n\r\n    axios\r\n      .get(url, {\r\n        cancelToken: source.token,\r\n      })\r\n      .then((res) => {\r\n        if (!unmounted) {\r\n          // @ts-ignore\r\n          setCoinData(res.data)\r\n        }\r\n      })\r\n      .catch(function (e) {\r\n        if (!unmounted) {\r\n          toast.error(`Error: ${e.message}`)\r\n        }\r\n        if (axios.isCancel(e)) {\r\n          console.log(`request cancelled:${e.message}`)\r\n        } else {\r\n          console.log('another error happened:' + e.message)\r\n        }\r\n      })\r\n\r\n    return () => {\r\n      unmounted = true\r\n      source.cancel('Cancelling in cleanup')\r\n    }\r\n  }, [])\r\n\r\n  // Get token balance of user\r\n  useEffect(() => {\r\n    let mounted = true\r\n\r\n    getTokenBalance(library, account).then((res) => {\r\n      if (mounted) {\r\n        setTokenBalance(res)\r\n        refreshMons()\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      mounted = false\r\n    }\r\n  }, [account, library, disableBuyItemBtn, disableFightBtn])\r\n\r\n  // Get contract events\r\n  useEffect(() => {\r\n    if (!library || !account) {\r\n      return\r\n    }\r\n\r\n    let mounted = true\r\n\r\n    ;(async function fightResults() {\r\n      const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\r\n\r\n      contr.on('FightResults', (_winnerId, _round) => {\r\n        if (mounted) {\r\n          const winId = BigNumber.from(_winnerId._hex).toNumber()\r\n          const round = BigNumber.from(_round._hex).toNumber()\r\n          setWinner(winId)\r\n          setRounds(round)\r\n          refreshMons()\r\n          setDisableFightBtn(false)\r\n        }\r\n      })\r\n\r\n      contr.on('Rewards', (_winnerId, _rewards) => {\r\n        if (mounted) {\r\n          const rewards = BigNumber.from(_rewards._hex).toNumber()\r\n          setRewards(rewards)\r\n          refreshMons()\r\n          setDisableFightBtn(false)\r\n        }\r\n      })\r\n    })()\r\n\r\n    return () => {\r\n      const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\r\n      contr.off('FightResults', (_winnerId, _round) => {\r\n        console.log('unsubscribe event: fight results')\r\n        setDisableFightBtn(false)\r\n      })\r\n      contr.off('Rewards', (_winnerId, _round) => {\r\n        console.log('unsubscribe event: rewards')\r\n        setDisableFightBtn(false)\r\n      })\r\n\r\n      mounted = false\r\n    }\r\n  }, [account, library, fightTxDone])\r\n\r\n  // Get items from nft contract\r\n  useEffect(() => {\r\n    if (!library || !account) {\r\n      return\r\n    }\r\n\r\n    let mounted = true\r\n\r\n    ;(async function () {\r\n      if (mounted) {\r\n        const nftContr = new Contract(ERC1155_CONTRACT_ADDRESS, nftInterface, library.getSigner(account))\r\n        const healpot = await nftContr.balanceOf(account, 0)\r\n        const manapot = await nftContr.balanceOf(account, 1)\r\n        const magicpot = await nftContr.balanceOf(account, 2)\r\n        const _swords = await nftContr.balanceOf(account, 3)\r\n        const _shields = await nftContr.balanceOf(account, 4)\r\n\r\n        setHealingPotions(BigNumber.from(healpot._hex).toBigInt())\r\n        setManaPotions(BigNumber.from(manapot._hex).toBigInt())\r\n        setMagicPotions(BigNumber.from(magicpot._hex).toBigInt())\r\n        setSwords(BigNumber.from(_swords._hex).toBigInt())\r\n        setShields(BigNumber.from(_shields._hex).toBigInt())\r\n      }\r\n    })()\r\n\r\n    return () => {\r\n      mounted = false\r\n    }\r\n  }, [library, account, disableBuyItemBtn])\r\n\r\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\r\n  const triedEager = useEagerConnect()\r\n\r\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\r\n  useInactiveListener(!triedEager || !!activatingConnector)\r\n\r\n  // Change the list of created Crypromons saved in the state so UI refreshes after this call\r\n  async function refreshMons() {\r\n    if (!library || !account) return\r\n    await getMons(library, account)\r\n      .then((_mons) => {\r\n        // map result\r\n        const monsMap = _mons.map((mon) => ({\r\n          atk: mon.atk,\r\n          def: mon.def,\r\n          evolve: mon.evolve,\r\n          forSale: mon.forSale,\r\n          hp: mon.hp,\r\n          id: BigNumber.from(mon.id._hex).toNumber(),\r\n          monType: mon.monType,\r\n          owner: mon.owner,\r\n          price: BigNumber.from(mon.price._hex).toBigInt(),\r\n          sharedTo: mon.sharedTo,\r\n          species: mon.species,\r\n          speed: mon.speed,\r\n        }))\r\n        setCryptomons(monsMap)\r\n        setMyCryptomons(monsMap.filter((mon) => mon.owner === account))\r\n        setOtherCryptomons(monsMap.filter((mon) => mon.owner !== account))\r\n      })\r\n      .catch((err) => toast.error(err))\r\n  }\r\n\r\n  // Function that buys a Cryptomon through a smart contract function\r\n  async function buyMon(id, price) {\r\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\r\n    // const weiPerEth = WeiPerEther as any\r\n    const newprice = `${BigInt(price)}`\r\n    // const newPrice =  BigNumber.from(parseEther(price)).toString();\r\n    let overrides = { value: newprice }\r\n\r\n    const tx = await contr.buyMon(id, overrides)\r\n    const recpt = await tx.wait()\r\n    txSuccess(recpt, toast, refreshMons)\r\n    txFail(recpt, toast)\r\n  }\r\n\r\n  // Function that adds a Cryptomon for sale through a smart contract function\r\n  async function addForSale(id, price) {\r\n    if (price === 0 || price === '0') {\r\n      toast.error('🦄 Price is 0')\r\n      return\r\n    }\r\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\r\n    const tx = await contr.addForSale(id, parseEther(price))\r\n    const receipt = await tx.wait()\r\n    if (receipt && receipt.status === 1) {\r\n      toast.success(`Success, Tx hash: ${receipt.transactionHash}`)\r\n      refreshMons()\r\n    }\r\n\r\n    if (receipt && receipt.status === 0) {\r\n      toast.error(`Error, Tx hash: ${receipt.transactionHash}`)\r\n    }\r\n  }\r\n\r\n  // Function that removes a Cryptomon from sale through a smart contract function\r\n  async function removeFromSale(id) {\r\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\r\n    const tx = await contr.removeFromSale(id)\r\n    const recpt = await tx.wait()\r\n    if (recpt && recpt.status === 1) {\r\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\r\n      refreshMons()\r\n    }\r\n\r\n    if (recpt && recpt.status === 0) {\r\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\r\n    }\r\n  }\r\n\r\n  // Function that breeds 2 Cryptomons through a smart contract function\r\n  async function breedMons(id1, id2) {\r\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\r\n    const tx = await contr.breedMons(id1, id2)\r\n    const recpt = await tx.wait()\r\n    if (recpt && recpt.status) {\r\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\r\n    }\r\n\r\n    if (recpt && !recpt.status) {\r\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\r\n    }\r\n\r\n    await refreshMons()\r\n  }\r\n\r\n  // Function that allows 2 Cryptomons to fight through a smart contract function\r\n  async function fight(id1, id2) {\r\n    setDisableFightBtn(true)\r\n    if (id1 === null || id2 === null) {\r\n      return\r\n    }\r\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\r\n    try {\r\n      const tx = await contr.fight(id1, id2)\r\n      const recpt = await tx.wait()\r\n      if (recpt && recpt.status) {\r\n        setFightTxDone(true)\r\n      }\r\n\r\n      if (recpt && !recpt.status) {\r\n        toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\r\n        setFightTxDone(false)\r\n      }\r\n    } catch (error) {\r\n      toast.error(`Fight function error: ${error.data?.message || ''}`)\r\n      setDisableFightBtn(false)\r\n    }\r\n  }\r\n\r\n  // Function that starts sharing a Cryptomon to another address through a smart contract function\r\n  async function startSharing(id, address) {\r\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\r\n    const tx = await contr.startSharing(id, address)\r\n    const recpt = await tx.wait()\r\n    if (recpt && recpt.status) {\r\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\r\n      refreshMons()\r\n    }\r\n\r\n    if (recpt && !recpt.status) {\r\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\r\n    }\r\n  }\r\n\r\n  // Function that stops sharing a Cryptomon with other addresses through a smart contrct function\r\n  async function stopSharing(id) {\r\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\r\n    const tx = await contr.stopSharing(id)\r\n    const recpt = await tx.wait()\r\n    if (recpt && recpt.status) {\r\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\r\n      refreshMons()\r\n    }\r\n\r\n    if (recpt && !recpt.status) {\r\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\r\n    }\r\n  }\r\n\r\n  // Handlers for form inputs\r\n  function handleShareId(event) {\r\n    setShareId(event.target.value)\r\n  }\r\n  function handleShareAddress(event) {\r\n    setShareAddress(event.target.value)\r\n  }\r\n\r\n  function handleChange(id, event) {\r\n    setValue(event.target.value)\r\n  }\r\n\r\n  function handleBuyItemAmount(event) {\r\n    setBuyItemAmount(event.target.value)\r\n  }\r\n  function handleBurn(event) {\r\n    setBurnAmount(event.target.value)\r\n  }\r\n\r\n  async function buyItem(units: string, price: string, itemNumber: string, data: string = '0x00') {\r\n    setDisableBuyItem(true)\r\n    if (!units || !price || !itemNumber) {\r\n      return\r\n    }\r\n    const _price = parseEther(price)\r\n    const priceInWei = `${BigNumber.from(_price._hex).toBigInt()}`\r\n    approve(library, account, priceInWei)\r\n      .then(async (results) => {\r\n        if (results) {\r\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\r\n          const tx = await contr.buyItem(units, priceInWei, itemNumber, data)\r\n          const recpt = await tx.wait()\r\n          txSuccess(recpt, toast, refreshMons)\r\n          txFail(recpt, toast)\r\n        } else {\r\n          toast.error(`Error in approving`)\r\n        }\r\n        setDisableBuyItem(false)\r\n      })\r\n      .catch((e) => {\r\n        toast.error(`Error: ${e}`)\r\n        setDisableBuyItem(false)\r\n      })\r\n  }\r\n\r\n  async function burn(amount: string) {\r\n    setDisableBuyItem(true)\r\n    if (!amount) {\r\n      return\r\n    }\r\n    const _amount = parseEther(amount)\r\n    const amountInWei = `${BigNumber.from(_amount._hex).toBigInt()}`\r\n    approve(library, account, amountInWei)\r\n      .then(async (results) => {\r\n        if (results) {\r\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\r\n          const tx = await contr.burn(amountInWei)\r\n          const recpt = await tx.wait()\r\n          txSuccess(recpt, toast, refreshMons)\r\n          txFail(recpt, toast)\r\n        } else {\r\n          toast.error(`Error in approving`)\r\n          console.log(`Error in approving`);\r\n          \r\n        }\r\n        setDisableBuyItem(false)\r\n      })\r\n      .catch((e) => {\r\n        toast.error(`Error: ${e}`)\r\n        console.log(`Error: ${e}`);\r\n        setDisableBuyItem(false)\r\n      })\r\n  }\r\n\r\n  // Components\r\n  // div that holds the name and id of each Cryptomon\r\n  const nameDiv = (mon) => {\r\n    return (\r\n      <div>\r\n        <label className=\"monName\">{names[mon?.species]}</label>\r\n        <label className=\"\" style={{ float: 'right' }}>\r\n          {'ID: ' + mon?.id}\r\n        </label>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Function that  returns the style of the background image according to Cryptomons' type\r\n  const bgStyle = (Type) => ({\r\n    backgroundImage: 'url(' + bg[Type] + ')',\r\n    backgroundSize: '210px 240px',\r\n  })\r\n\r\n  // div that holds the images (Cryptomon image and background image) of a Cryptomon\r\n  const imgDiv = (mon) => {\r\n    return (\r\n      <div className=\"monBox\" style={bgStyle(mon?.monType)}>\r\n        <img\r\n          className=\"monImg\"\r\n          src={MonImages[`${parseInt(mon?.species) + 1}`]}\r\n          alt={mon?.species}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // div that holds the stats of a Cryptomon\r\n  const statDiv = (mon) => {\r\n    return (\r\n      <div className=\"stat-area\">\r\n        <div className=\"stat-line\">\r\n          <label className=\"stat-label\">Hp: </label>\r\n          <StatBar percentage={(mon?.hp * 100) / 140} />\r\n        </div>\r\n        <div className=\"stat-line\">\r\n          <label className=\"stat-label\">Attack: </label>\r\n          <StatBar percentage={(mon?.atk * 100) / 140} />\r\n        </div>\r\n        <div className=\"stat-line\">\r\n          <label className=\"stat-label\">Defense: </label>\r\n          <StatBar percentage={(mon?.def * 100) / 140} />\r\n        </div>\r\n        <div className=\"stat-line\">\r\n          <label className=\"stat-label\">Speed: </label>\r\n          <StatBar percentage={(mon?.speed * 100) / 140} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Create the div with add for sale button\r\n  const addForSaleDiv = (mon, value) => {\r\n    return (\r\n      <div className=\"selling-div\">\r\n        <label className=\"add-for-sale-label\">Set creatures price:</label>\r\n        <input type=\"number\" className=\"add-for-sale-input\" value={value} onChange={(e) => handleChange(mon?.id, e)} />\r\n        <button\r\n          className=\"rpgui-button\"\r\n          type=\"button\"\r\n          style={{ float: 'right' }}\r\n          onClick={() => addForSale(mon?.id, value)}\r\n        >\r\n          Add for sale\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Create the div with remove from sale button\r\n  const removeFromSaleDiv = (mon) => {\r\n    return (\r\n      <div className=\"selling-div\">\r\n        <label className=\"remove-from-sale-label\">\r\n          Price:\r\n          <br />\r\n          {formatUnits(mon?.price)}\r\n        </label>\r\n        <button\r\n          className=\"rpgui-button\"\r\n          type=\"button\"\r\n          style={{ float: 'right' }}\r\n          onClick={() => removeFromSale(mon?.id)}\r\n        >\r\n          Remove from sale\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Create the div with buy button\r\n  const buyDiv = (mon) => {\r\n    return (\r\n      <div className=\"buying-div\">\r\n        <div className=\"sale-price\">\r\n          Price:\r\n          <br />\r\n          {formatUnits(mon?.price, 18)}\r\n        </div>\r\n        <div className=\"sale-owner\">Creature Owner: {mon?.owner} </div>\r\n        <button\r\n          className=\"sale-btn rpgui-button\"\r\n          type=\"button\"\r\n          style={{ float: 'right' }}\r\n          onClick={() => buyMon(mon?.id, mon?.price)}\r\n        >\r\n          Buy\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Create the div with breed choice 1, choice 2 buttons\r\n  const breedDiv = (mon) => {\r\n    return (\r\n      <div className=\"breed-choice-div\">\r\n        <button\r\n          className=\"br-Choice-btn rpgui-button\"\r\n          type=\"button\"\r\n          style={{ float: 'right' }}\r\n          onClick={() => {\r\n            setBreedChoice1(mon?.id)\r\n          }}\r\n        >\r\n          Choice 1\r\n        </button>\r\n        <button\r\n          className=\"br-Choice-btn rpgui-button\"\r\n          type=\"button\"\r\n          style={{ float: 'right' }}\r\n          onClick={() => {\r\n            setBreedChoice2(mon?.id)\r\n          }}\r\n        >\r\n          Choice 2\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const breedOption = (breedchoice) => {\r\n    if (breedchoice === null) {\r\n      return (\r\n        <div className=\"mon\">\r\n          <figure className=\"my-figure\">\r\n            <figcaption>\r\n              <div className=\"monBox\">\r\n                {' '}\r\n                <img className=\"monImg\" src={MonImages['0']} alt={'empty'} />\r\n              </div>\r\n            </figcaption>\r\n          </figure>\r\n        </div>\r\n      )\r\n    } else {\r\n      return cryptomons\r\n        .filter((mon) => mon.id === breedchoice)\r\n        .map((mon) => (\r\n          <React.Fragment key={mon.id}>\r\n            <div className=\"mon\">\r\n              <figure className=\"my-figure\">\r\n                {imgDiv(mon)}\r\n                <figcaption></figcaption>\r\n              </figure>\r\n            </div>\r\n          </React.Fragment>\r\n        ))\r\n    }\r\n  }\r\n\r\n  // div with users Cryptomons\r\n  const myCryptomonsDiv = myCryptomons\r\n    .filter((mon) => !mon.forSale)\r\n    .map((mon) => (\r\n      <React.Fragment key={mon.id}>\r\n        <div className=\"mon\">\r\n          <figure className=\"my-figure\">\r\n            {nameDiv(mon)}\r\n            {imgDiv(mon)}\r\n            <figcaption>{statDiv(mon)}</figcaption>\r\n          </figure>\r\n          {addForSaleDiv(mon, value)}\r\n        </div>\r\n      </React.Fragment>\r\n    ))\r\n\r\n  // div with user's Cryptomons that are for sale\r\n  const forSaleCryptomons = myCryptomons\r\n    .filter((mon) => mon.forSale)\r\n    .map((mon) => (\r\n      <React.Fragment key={mon.id}>\r\n        <div className=\"mon\">\r\n          <figure className=\"my-figure\">\r\n            {nameDiv(mon)}\r\n            {imgDiv(mon)}\r\n            <figcaption>{statDiv(mon)}</figcaption>\r\n          </figure>\r\n          {removeFromSaleDiv(mon)}\r\n        </div>\r\n      </React.Fragment>\r\n    ))\r\n\r\n  // div with Cryptomons available for buy to the user\r\n  const buyCryptomons = otherCryptomons\r\n    .filter((mon) => mon.forSale)\r\n    .map((mon) => (\r\n      <React.Fragment key={mon.id}>\r\n        <div className=\"mon\">\r\n          <figure className=\"my-figure\">\r\n            {nameDiv(mon)}\r\n            {imgDiv(mon)}\r\n            <figcaption>{statDiv(mon)}</figcaption>\r\n          </figure>\r\n          {buyDiv(mon)}\r\n        </div>\r\n      </React.Fragment>\r\n    ))\r\n\r\n  // div with user's Cryptomons that can be used for breeding\r\n  const forBreedCryptomons = myCryptomons\r\n    .filter((mon) => !mon.forSale)\r\n    .map((mon) => (\r\n      <React.Fragment key={mon.id}>\r\n        <div className=\"mon\">\r\n          <figure className=\"my-figure\">\r\n            {nameDiv(mon)}\r\n            {imgDiv(mon)}\r\n            <figcaption>{statDiv(mon)}</figcaption>\r\n          </figure>\r\n          {breedDiv(mon)}\r\n        </div>\r\n      </React.Fragment>\r\n    ))\r\n\r\n  const cond = (mon) => (\r\n    ((mon.owner.toString().toLowerCase() === account?.toString()?.toLowerCase()) && (!mon.forSale)) ||\r\n    ((mon.sharedTo.toString().toLowerCase() === account?.toString()?.toLowerCase()) && (mon.owner.toString().toLowerCase() !== account?.toString()?.toLowerCase()))\r\n  );\r\n  // div with user's Cryptomons that can be used to fight with\r\n  const forFightWithCryptomons = cryptomons.filter(cond).map((mon) => (\r\n    <React.Fragment key={mon.id}>\r\n      <div className=\"mon\">\r\n        <figure className=\"my-figure\">\r\n          {nameDiv(mon)}\r\n          {imgDiv(mon)}\r\n          <figcaption>{statDiv(mon)}</figcaption>\r\n        </figure>\r\n        <div className=\"fight-choice-div\">\r\n          <button\r\n            className=\"fight-Choice-btn rpgui-button\"\r\n            type=\"button\"\r\n            style={{ float: 'right' }}\r\n            onClick={() => {\r\n              setFightChoice1(mon.id)\r\n            }}\r\n          >\r\n            Choice 1\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  ))\r\n\r\n  // div with Cryptomons that user can fight against\r\n  const forFightAgainstCryptomons = otherCryptomons\r\n    .filter((mon) => ((!mon.forSale) && (mon.sharedTo.toLowerCase() !== account?.toString().toLocaleLowerCase())) )\r\n    .map((mon) => (\r\n      <React.Fragment key={mon.id}>\r\n        <div className=\"mon\">\r\n          <figure className=\"my-figure\">\r\n            {nameDiv(mon)}\r\n            {imgDiv(mon)}\r\n            <figcaption>{statDiv(mon)}</figcaption>\r\n          </figure>\r\n          <div className=\"fight-choice-div\">\r\n            <button\r\n              className=\"fight-Choice-btn rpgui-button\"\r\n              type=\"button\"\r\n              style={{ float: 'right' }}\r\n              onClick={() => {\r\n                setFightChoice2(mon.id)\r\n              }}\r\n            >\r\n              Choice 2\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    ))\r\n\r\n  // div with user's shared Cryptomons\r\n  const sharedByMe = myCryptomons\r\n    .filter((mon) => ((mon.sharedTo.toLowerCase() !== account?.toString().toLocaleLowerCase()) && (!mon.forSale)))\r\n    .map((mon) => (\r\n      <React.Fragment key={mon.id}>\r\n        <div className=\"mon\">\r\n          <figure className=\"my-figure\">\r\n            {nameDiv(mon)}\r\n            {imgDiv(mon)}\r\n            <figcaption>{statDiv(mon)}</figcaption>\r\n          </figure>\r\n          <div className=\"sharing-div\">\r\n            <div className=\"shareTo-owner\">Shared to address: {mon.sharedTo} </div>\r\n            <button\r\n              className=\"stop-sharing-btn rpgui-button\"\r\n              type=\"button\"\r\n              style={{ float: 'right' }}\r\n              onClick={() => stopSharing(mon.id)}\r\n            >\r\n              Stop sharing\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    ))\r\n\r\n  // div with Cryptomons shared to the user\r\n  const sharedToMe = otherCryptomons\r\n    .filter((mon) => mon.sharedTo === account)\r\n    .map((mon) => (\r\n      <React.Fragment key={mon.id}>\r\n        <div className=\"mon\">\r\n          <figure className=\"my-figure\">\r\n            {nameDiv(mon)}\r\n            {imgDiv(mon)}\r\n            <figcaption>{statDiv(mon)}</figcaption>\r\n          </figure>\r\n          <div className=\"sharing-div\">\r\n            <label className=\"shared-owner\">Creature Owner: {mon.owner} </label>\r\n            <button\r\n              className=\"stop-sharing-btn rpgui-button\"\r\n              type=\"button\"\r\n              style={{ float: 'right' }}\r\n              onClick={() => stopSharing(mon.id)}\r\n            >\r\n              Stop sharing\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    ))\r\n\r\n  // Function that does all the rendering of the application\r\n  return (\r\n    // Creation of the different tabs of the UI\r\n    <div className=\"rpgui-content\">\r\n      <ToastContainer />\r\n\r\n      <div className=\"AppTitle\">\r\n        <div className=\"row\">\r\n          <div className=\"column title-column\">\r\n            <img src=\"/favicon-16x16.png\" alt=\"lokian-logo\" /> <span>L O K I A N </span>\r\n          </div>\r\n\r\n          <div className=\"column user-info-column\">\r\n            {/* ERC20, LOKs */}\r\n            <span className=\"rpgui-container framed-grey\">\r\n              {`${Math.round(Number(tokenBalance) * 1e4) / 1e4 || '0'} LOKs `}{' '}\r\n            </span>\r\n\r\n            {/* Network Errors */}\r\n            {!!error && (\r\n              <h4 className=\"rpgui-container framed-golden-2\" style={{ marginTop: '1rem', marginBottom: '0' }}>\r\n                {getErrorMessage(error)}\r\n              </h4>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"column wallet-column\">\r\n            {/* wallet buttons */}\r\n            <span className=\"wallet-buttons\">\r\n              {/* wallet logout */}\r\n              <div>\r\n                {(active || error) && (\r\n                  <button\r\n                    className=\"rpgui-button\"\r\n                    onClick={() => {\r\n                      deactivate()\r\n                      setCryptomons([])\r\n                      setMyCryptomons([])\r\n                      setOtherCryptomons([])\r\n                      setWinner(null)\r\n                      setRounds(null)\r\n                      setValue(0)\r\n                    }}\r\n                  >\r\n                    Logout\r\n                  </button>\r\n                )}\r\n              </div>\r\n              {Object.keys(connectorsByName).map((name) => {\r\n                const currentConnector = connectorsByName[name]\r\n                const activating = currentConnector === activatingConnector\r\n                const connected = currentConnector === connector\r\n                const disabled = !triedEager || !!activatingConnector || connected || !!error\r\n\r\n                return (\r\n                  <button\r\n                    className=\"rpgui-button golden\"\r\n                    type=\"button\"\r\n                    style={{\r\n                      fontSize: '20px',\r\n                      paddingTop: '14px',\r\n                    }}\r\n                    onClick={() => {\r\n                      setActivatingConnector(currentConnector)\r\n                      activate(currentConnector)\r\n                    }}\r\n                    disabled={disabled}\r\n                    key={name}\r\n                  >\r\n                    {activating && <Spinner color={'black'} style={{ height: '25%', marginLeft: '-1rem' }} />}\r\n                    <Account /> <div style={{ display: 'none' }}>{name}</div>\r\n                    {!account ? `Connect wallet` : ''}\r\n                  </button>\r\n                )\r\n              })}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Tabs defaultActiveKey=\"tokens\" id=\"uncontrolled-tab-example\">\r\n        <Tab className=\"x\" eventKey=\"myCryptomons\" title=\"My Creatures\">\r\n          <div className=\"p1\">Your Entries</div>\r\n          {myCryptomonsDiv}\r\n        </Tab>\r\n        <Tab eventKey=\"forSale\" title=\"For trade\">\r\n          <div className=\"p1\">Manage Trade</div>\r\n          {forSaleCryptomons}\r\n        </Tab>\r\n        <Tab eventKey=\"buyCryptomons\" title=\"Trade Creatures\">\r\n          {buyCryptomons}\r\n        </Tab>\r\n        <Tab eventKey=\"breedCryptomons\" title=\"Breed Creatures\">\r\n          <div className=\"p1\">Breeding Grounds</div>\r\n          <div className=\"breeding-area\">\r\n            {breedOption(breedChoice1)}\r\n            {breedOption(breedChoice2)}\r\n            <button\r\n              className=\"rpgui-button\"\r\n              type=\"button\"\r\n              style={{ width: '420px' }}\r\n              onClick={() => breedMons(breedChoice1, breedChoice2)}\r\n            >\r\n              Breed choosen creatures\r\n            </button>\r\n          </div>\r\n          <br />\r\n          {forBreedCryptomons}\r\n        </Tab>\r\n        <Tab eventKey=\"fight\" title=\"Fight\">\r\n          <div className=\"p1\">V S</div>\r\n          <div className=\"fighting-area\">\r\n            {breedOption(fightChoice1)}\r\n            {breedOption(fightChoice2)}\r\n\r\n            <label className=\"winner-label\">\r\n              And the winner is...{' '}\r\n              {fightTxDone ? names[cryptomons.find((mon) => mon.id?.toString() === winner?.toString())?.species] : ''}\r\n              {!winner || winner === 12345678911 ? 'still unknown' : ''}\r\n              {winner === 12345678910 ? \"no one, it's a tie\" : ''}\r\n            </label>\r\n\r\n            {fightTxDone && winner !== 12345678910 ? (\r\n              <>\r\n                <br />\r\n                <label className=\"winner-label\">Winning creature's Id: {winner}</label>\r\n                <br />\r\n                <label className=\"winner-label\">Rounds the fight lasted: {rounds}</label>\r\n                <br />\r\n\r\n                {!fightTxDone && rewards === 0 && !winner ? (\r\n                  ''\r\n                ) : (\r\n                  <label className=\"winner-label\">{rewards === 0 ? '' : `You have won ${rewards} LOKs!`}</label>\r\n                )}\r\n              </>\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {disableFightBtn ? (\r\n              <Spinner color=\"gray\" style={{ marginLeft: '50%', marginRight: 'auto', padding: '8px' }} />\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            <button\r\n              id=\"fight-btn\"\r\n              className=\"rpgui-button\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setWinner(null)\r\n                setRounds(null)\r\n                setFightTxDone(false)\r\n                setRewards(0)\r\n                fight(fightChoice1, fightChoice2)\r\n              }}\r\n              disabled={disableFightBtn}\r\n            >\r\n              Fight with choosen creatures\r\n            </button>\r\n          </div>\r\n          <div className=\"fight-mons-<h1>Sharing Management</h1>area\">\r\n            <div className=\"fightWith-area border-gradient border-gradient-purple\">\r\n              <div className=\"p2\">Your Creatures</div>\r\n              {forFightWithCryptomons}\r\n            </div>\r\n            <div className=\"fightAgainst-area border-gradient border-gradient-purple\">\r\n              <div className=\"p2\">Opponent Creatures</div>\r\n              {forFightAgainstCryptomons}\r\n            </div>\r\n          </div>\r\n        </Tab>\r\n        <Tab eventKey=\"share\" title=\"Share Creatures\">\r\n          <div className=\"p1\">Sharing Management</div>\r\n          <div className=\"sharing-area\">\r\n            <div className=\"form-line\">\r\n              <label className=\"form-label\">Creature Id:</label>\r\n              <input className=\"form-input\" value={shareId} onChange={(e) => handleShareId(e)} />\r\n            </div>\r\n            <div className=\"form-line\">\r\n              <label className=\"form-label\">Share to address:</label>\r\n              <input className=\"form-input\" value={shareAddress} onChange={(e) => handleShareAddress(e)} />\r\n            </div>\r\n            <div className=\"form-line\">\r\n              <button\r\n                className=\"rpgui-button\"\r\n                type=\"button\"\r\n                style={{ float: 'right' }}\r\n                onClick={() => startSharing(shareId, shareAddress)}\r\n              >\r\n                Share\r\n              </button>\r\n            </div>\r\n          </div>\r\n          {sharedByMe}\r\n        </Tab>\r\n        <Tab eventKey=\"sharedToMe\" title=\"Shared To Me\">\r\n          <div className=\"p1\">Shared To You</div>\r\n          {sharedToMe}\r\n        </Tab>\r\n        <Tab eventKey=\"token\" title=\"Token\">\r\n          <div className=\"p1\">Your money</div>\r\n          <div className=\"p1\" style={{ padding: '12px' }}>\r\n            {tokenBalance} Lokians\r\n          </div>\r\n          <br />\r\n          <br />\r\n          <div className=\"p1\">\r\n            Your items\r\n            <div style={{ marginLeft: '45%', marginRight: 'auto' }}>\r\n              <div className=\"row\">\r\n                <div className=\"column\">\r\n                  {!swords ? <div className=\"rpgui-icon weapon-slot\"></div> : <div className=\"rpgui-icon sword\"></div>}\r\n                  {!shields ? (\r\n                    <div className=\"rpgui-icon shield-slot\"></div>\r\n                  ) : (\r\n                    <div className=\"rpgui-icon shield\"></div>\r\n                  )}\r\n                  {healingPotions || manaPotions || magicPotions ? (\r\n                    <div className=\"rpgui-icon potion-red\"></div>\r\n                  ) : (\r\n                    <div className=\"rpgui-icon potion-slot\"></div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <div style={{ marginLeft: '40%', marginRight: 'auto' }}>\r\n              <div className=\"row\">\r\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\r\n                  <p>You have {`${swords}`} swords!</p>\r\n                  <p>You have {`${shields}`} shields!</p>\r\n                  <p>You have {`${healingPotions}`} healing potions!</p>\r\n                  <p>You have {`${manaPotions}`} mana potions!</p>\r\n                  <p>You have {`${magicPotions}`} magic potions!</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"rpgui-container framed-grey\">\r\n            <div className=\"p1\">Buy somethin</div>\r\n            <div className=\"p1\">note: if transaction fails, set gas fees above 100k</div>\r\n            <div className=\"sharing-area\">\r\n              <span>\r\n                <div className=\"rpgui-icon sword\"></div> A Sword\r\n              </span>\r\n              <div className=\"form-line\">\r\n                <label className=\"form-label\">Amount</label>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"0\"\r\n                  value={buyItemAmount}\r\n                  onChange={(e) => handleBuyItemAmount(e)}\r\n                />\r\n              </div>\r\n              <div className=\"form-line\">\r\n                <button\r\n                  className=\"rpgui-button\"\r\n                  type=\"button\"\r\n                  style={{ float: 'right' }}\r\n                  onClick={() => buyItem(buyItemAmount, '500', '3')}\r\n                  disabled={disableBuyItemBtn}\r\n                >\r\n                  Buy\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"sharing-area\">\r\n              <span>\r\n                <div className=\"rpgui-icon shield\"></div> A Shield\r\n              </span>\r\n              <div className=\"form-line\">\r\n                <label className=\"form-label\">Amount</label>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"0\"\r\n                  value={buyItemAmount}\r\n                  onChange={(e) => handleBuyItemAmount(e)}\r\n                />\r\n              </div>\r\n              <div className=\"form-line\">\r\n                <button\r\n                  className=\"rpgui-button\"\r\n                  type=\"button\"\r\n                  style={{ float: 'right' }}\r\n                  onClick={() => buyItem(buyItemAmount, '500', '4')}\r\n                  disabled={disableBuyItemBtn}\r\n                >\r\n                  Buy\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"sharing-area\">\r\n              <span>\r\n                <div className=\"rpgui-icon potion-red\"></div> A Healing Potion\r\n              </span>\r\n              <div className=\"form-line\">\r\n                <label className=\"form-label\">Amount</label>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"0\"\r\n                  value={buyItemAmount}\r\n                  onChange={(e) => handleBuyItemAmount(e)}\r\n                />\r\n              </div>\r\n              <div className=\"form-line\">\r\n                <button\r\n                  className=\"rpgui-button\"\r\n                  type=\"button\"\r\n                  style={{ float: 'right' }}\r\n                  onClick={() => buyItem(buyItemAmount, '50', '0')}\r\n                  disabled={disableBuyItemBtn}\r\n                >\r\n                  Buy\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"sharing-area\">\r\n              <span>\r\n                <div className=\"rpgui-icon potion-blue\"></div> A Mana Potion\r\n              </span>\r\n              <div className=\"form-line\">\r\n                <label className=\"form-label\">Amount</label>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"0\"\r\n                  value={buyItemAmount}\r\n                  onChange={(e) => handleBuyItemAmount(e)}\r\n                />\r\n              </div>\r\n              <div className=\"form-line\">\r\n                <button\r\n                  className=\"rpgui-button\"\r\n                  type=\"button\"\r\n                  style={{ float: 'right' }}\r\n                  onClick={() => buyItem(buyItemAmount, '50', '1')}\r\n                  disabled={disableBuyItemBtn}\r\n                >\r\n                  Buy\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"sharing-area\">\r\n              <span>\r\n                <div className=\"rpgui-icon potion-green\"></div> A Magic Potion\r\n              </span>\r\n              <div className=\"form-line\">\r\n                <label className=\"form-label\">Amount</label>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"0\"\r\n                  value={buyItemAmount}\r\n                  onChange={(e) => handleBuyItemAmount(e)}\r\n                />\r\n              </div>\r\n              <div className=\"form-line\">\r\n                <button\r\n                  className=\"rpgui-button\"\r\n                  type=\"button\"\r\n                  style={{ float: 'right' }}\r\n                  onClick={() => buyItem(buyItemAmount, '50', '2')}\r\n                  disabled={disableBuyItemBtn}\r\n                >\r\n                  Buy\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"rpgui-container framed-grey\">\r\n            <div className=\"p1\">Give to the skeleton people (burn token)</div>\r\n            <div className=\"p1\">note: if transaction fails, set gas fees above 100k</div>\r\n            <div style={{ display: 'flex', width: '20%', marginLeft: '40%', marginRight: 'auto' }}>\r\n              <img className=\"monImg\" src={MonImages['skelly']} alt=\"skeleton-people-1\" />\r\n              <img className=\"monImg\" src={MonImages['skelly2']} alt=\"skeleton-people-1\" />\r\n              <img className=\"monImg\" src={MonImages['skellyrip']} alt=\"skeleton-people-1\" />\r\n            </div>\r\n            <div className=\"sharing-area\">\r\n              <div className=\"form-line\">\r\n                <label className=\"form-label\">Amount</label>\r\n                <input className=\"form-input\" placeholder=\"0\" value={burnAmount} onChange={(e) => handleBurn(e)} />\r\n              </div>\r\n              <div className=\"form-line\">\r\n                <button\r\n                  className=\"rpgui-button\"\r\n                  type=\"button\"\r\n                  style={{ float: 'right' }}\r\n                  onClick={() => burn(burnAmount)}\r\n                  disabled={disableBuyItemBtn}\r\n                >\r\n                  Give\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Tab>\r\n      </Tabs>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","E:\\Lokian.eth\\src\\utils\\txFail.js",[],"E:\\Lokian.eth\\src\\utils\\txSuccess.js",[],"E:\\Lokian.eth\\src\\wallet\\connectors.ts",[],"E:\\Lokian.eth\\src\\wallet\\hooks.ts",["50"],"import { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nimport { injected } from './connectors'\r\n\r\nexport function useEagerConnect() {\r\n    const { activate, active } = useWeb3React()\r\n  \r\n    const [tried, setTried] = useState(false)\r\n  \r\n    useEffect(() => {\r\n      injected.isAuthorized().then((isAuthorized: boolean) => {\r\n        if (isAuthorized) {\r\n          activate(injected, undefined, true).catch(() => {\r\n            setTried(true)\r\n          })\r\n        } else {\r\n          setTried(true)\r\n        }\r\n      })\r\n    }, []) // intentionally only running on mount (make sure it's only mounted once :))\r\n  \r\n    // if the connection worked, wait until we get confirmation of that to flip the flag\r\n    useEffect(() => {\r\n      if (!tried && active) {\r\n        setTried(true)\r\n      }\r\n    }, [tried, active])\r\n  \r\n    return tried\r\n  }\r\n\r\n  export function useInactiveListener(suppress: boolean = false) {\r\n    const { active, error, activate } = useWeb3React()\r\n  \r\n    useEffect((): any => {\r\n      const { ethereum } = window as any\r\n      if (ethereum && ethereum.on && !active && !error && !suppress) {\r\n        const handleConnect = () => {\r\n          console.log(\"Handling 'connect' event\")\r\n          activate(injected)\r\n        }\r\n        const handleChainChanged = (chainId: string | number) => {\r\n          console.log(\"Handling 'chainChanged' event with payload\", chainId)\r\n          activate(injected)\r\n        }\r\n        const handleAccountsChanged = (accounts: string[]) => {\r\n          console.log(\"Handling 'accountsChanged' event with payload\", accounts)\r\n          if (accounts.length > 0) {\r\n            activate(injected)\r\n          }\r\n        }\r\n        const handleNetworkChanged = (networkId: string | number) => {\r\n          console.log(\"Handling 'networkChanged' event with payload\", networkId)\r\n          activate(injected)\r\n        }\r\n  \r\n        ethereum.on('connect', handleConnect)\r\n        ethereum.on('chainChanged', handleChainChanged)\r\n        ethereum.on('accountsChanged', handleAccountsChanged)\r\n        ethereum.on('networkChanged', handleNetworkChanged)\r\n  \r\n        return () => {\r\n          if (ethereum.removeListener) {\r\n            ethereum.removeListener('connect', handleConnect)\r\n            ethereum.removeListener('chainChanged', handleChainChanged)\r\n            ethereum.removeListener('accountsChanged', handleAccountsChanged)\r\n            ethereum.removeListener('networkChanged', handleNetworkChanged)\r\n          }\r\n        }\r\n      }\r\n    }, [active, error, suppress, activate])\r\n  }","E:\\Lokian.eth\\src\\StatBar.tsx",[],"E:\\Lokian.eth\\src\\components\\Spinner.tsx",[],"E:\\Lokian.eth\\src\\sprites-copy\\index.js",[],{"ruleId":"51","severity":1,"message":"52","line":12,"column":1,"nodeType":"53","endLine":18,"endColumn":2},{"ruleId":"54","severity":1,"message":"55","line":286,"column":10,"nodeType":"56","messageId":"57","endLine":286,"endColumn":18},{"ruleId":"58","severity":1,"message":"59","line":314,"column":6,"nodeType":"60","endLine":314,"endColumn":38,"suggestions":"61"},{"ruleId":"58","severity":1,"message":"59","line":364,"column":6,"nodeType":"60","endLine":364,"endColumn":60,"suggestions":"62"},{"ruleId":"58","severity":1,"message":"59","line":411,"column":6,"nodeType":"60","endLine":411,"endColumn":37,"suggestions":"63"},{"ruleId":"58","severity":1,"message":"64","line":21,"column":8,"nodeType":"60","endLine":21,"endColumn":10,"suggestions":"65"},"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'coinData' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshMons'. Either include it or remove the dependency array.","ArrayExpression",["66"],["67"],["68"],"React Hook useEffect has a missing dependency: 'activate'. Either include it or remove the dependency array.",["69"],{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},"Update the dependencies array to be: [activatingConnector, connector, refreshMons]",{"range":"78","text":"79"},"Update the dependencies array to be: [account, library, disableBuyItemBtn, disableFightBtn, refreshMons]",{"range":"80","text":"81"},"Update the dependencies array to be: [account, library, fightTxDone, refreshMons]",{"range":"82","text":"83"},"Update the dependencies array to be: [activate]",{"range":"84","text":"85"},[8926,8958],"[activatingConnector, connector, refreshMons]",[10136,10190],"[account, library, disableBuyItemBtn, disableFightBtn, refreshMons]",[11548,11579],"[account, library, fightTxDone, refreshMons]",[572,574],"[activate]"]